 Longest Nice Substring

class Solution {
public:
    string longestNiceSubstring(string s) {
        int n = s.size();
        if(n==1) return "";
        unordered_set<char>uset;
        for(int i =0 ; i<n ; i++){
           uset.insert(s[i]);
        }
        for(int i = 0 ; i<n ; i++){
        if(uset.count(tolower(s[i]))== true && uset.count(toupper(s[i]))== true) continue;
        string prev = longestNiceSubstring(s.substr(0,i));  
        string next = longestNiceSubstring(s.substr(i+1));
        return prev.size()>=next.size()? prev:next;
        }
        return s;
    }
};

Maximum Subarray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxSum = INT_MIN;
        int currentSum = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            currentSum += nums[i];
            
            if (currentSum > maxSum) {
                maxSum = currentSum;
            }
            if (currentSum < 0) {
                currentSum = 0;
            }
        }
        
        return maxSum;
    }
};
